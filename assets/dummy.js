eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/components\');\n    test(\'ember-cli-qunit/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/multi-select.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/helpers\');\n    test(\'ember-cli-qunit/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/helpers/get-name.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/multi-select\", \n  [\"ember\",\"ember-cli-multiselect/components/multi-select\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var Multiselect = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Multiselect;\n  });//# sourceURL=dummy/components/multi-select.js");

;eval("define(\"dummy/controllers/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Controller.extend({\n      myList: function() {\n        return [\n          Em.Object.create({\'name\': \'me\', \'showme\': \"Pick Me\"}),\n          Em.Object.create({\'name\': \'you\', \'showme\': \"Pick you\"})\n        ];\n      }.property(),\n      myPromiseList: function() {\n        var data = [\n          Em.Object.create({\'name\': \'red\'}),\n          Em.Object.create({\'name\': \'green\'}),\n          Em.Object.create({\'name\': \'blue\'})\n        ];\n        return new Em.RSVP.Promise(function(resolve) {\n          Em.run.later(function() {\n            resolve(data);\n          }, 2000);\n        });\n      }.property(),\n      pplComing: [],\n      coloursSelected: [],\n      dropdownOpen: false,\n      actions: {\n        selectionSaved: function(selectedRecords) {\n          this.set(\'pplComing\', selectedRecords);\n          this.set(\'dropdownOpen\', false);\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/index.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/components\');\n    test(\'ember-cli-content-security-policy/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/multi-select.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/helpers\');\n    test(\'ember-cli-content-security-policy/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/helpers/get-name.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/components\');\n    test(\'ember-cli-esnext/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/components/multi-select.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext/helpers\');\n    test(\'ember-cli-esnext/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/helpers/get-name.jshint.js");

;eval("define(\"dummy/ember-cli-multiselect/tests/ember-cli-multiselect/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-multiselect/components\');\n    test(\'ember-cli-multiselect/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-cli-multiselect/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-multiselect/tests/ember-cli-multiselect/components/multi-select.jshint.js");

;eval("define(\"dummy/ember-cli-multiselect/tests/ember-cli-multiselect/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-multiselect/helpers\');\n    test(\'ember-cli-multiselect/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-cli-multiselect/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-multiselect/tests/ember-cli-multiselect/helpers/get-name.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/components\');\n    test(\'ember-data/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-data/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/components/multi-select.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/helpers\');\n    test(\'ember-data/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-data/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/helpers/get-name.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/components\');\n    test(\'ember-export-application-global/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/components/multi-select.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/helpers\');\n    test(\'ember-export-application-global/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/helpers/get-name.jshint.js");

;eval("define(\"dummy/helpers/get-name\", \n  [\"ember\",\"ember-cli-multiselect/helpers/get-name\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var GetName = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = GetName;\n  });//# sourceURL=dummy/helpers/get-name.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/components/multi-select.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/components\');\n    test(\'live-reload-middleware/components/multi-select.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/components/multi-select.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/components/multi-select.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/helpers/get-name.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/helpers\');\n    test(\'live-reload-middleware/helpers/get-name.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/helpers/get-name.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/helpers/get-name.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<h1 id=\'title\'>Ember multi-select</h1>\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/components/multi-select\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"Loading \");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"...\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n    \");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers[\'if\'].call(depth0, \"showRecordNum\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      }\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\" (\");\n      stack1 = helpers._triageMustache.call(depth0, \"selectedRecordsNum\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")\");\n      return buffer;\n      }\n\n    function program6(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n  <form role=\\\"form\\\">\\n    <div class=\\\"combo-box form-group\\\">\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"text\"),\n        \'class\': (\"form-control\"),\n        \'value\': (\"searchText\"),\n        \'placeholder\': (\"Type to search\"),\n        \'autofocus\': (\"autofocus\")\n      },hashTypes:{\'type\': \"STRING\",\'class\': \"STRING\",\'value\': \"ID\",\'placeholder\': \"STRING\",\'autofocus\': \"STRING\"},hashContexts:{\'type\': depth0,\'class\': depth0,\'value\': depth0,\'placeholder\': depth0,\'autofocus\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n      <br/>\\n      <div class=\\\"toolbar\\\">\\n          <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectAll\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" type=\\\"button\\\" class=\\\"btn btn-default\\\">Select All</button>\\n          <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"deselectAll\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" type=\\\"button\\\" class=\\\"btn btn-default\\\">De-select All</button>\\n      </div>\\n      <br/>\\n\\n      \");\n      stack1 = helpers[\'if\'].call(depth0, \"noRecords\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n      \");\n      stack1 = helpers[\'if\'].call(depth0, \"submit\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </div>\\n  </form>\\n  \");\n      return buffer;\n      }\n    function program7(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n      <p><span class=\\\"label label-warning\\\">Note:</span> No records matching your filter. Try * to get some records</p>\\n      \");\n      }\n\n    function program9(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n      <table class=\\\"table table-hovered table-striped\\\">\\n      <tbody>\\n        \");\n      stack1 = helpers.each.call(depth0, \"r\", \"in\", \"filteredRecords\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n      </tbody>\\n      </table>\\n      \");\n      return buffer;\n      }\n    function program10(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n        <tr>\\n          <td>\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'name\': (\"r.selected\"),\n        \'checked\': (\"r.selected\")\n      },hashTypes:{\'type\': \"STRING\",\'name\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'name\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</td>\\n          <td><span \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"select\", \"r\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      data.buffer.push(escapeExpression((helper = helpers[\'get-name\'] || (depth0 && depth0[\'get-name\']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"ID\",\"ID\"],data:data},helper ? helper.call(depth0, \"r\", \"displayName\", options) : helperMissing.call(depth0, \"get-name\", \"r\", \"displayName\", options))));\n      data.buffer.push(\"</span></td>\\n        </tr>\\n        \");\n      return buffer;\n      }\n\n    function program12(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n        <div class=\\\"actionbar\\\">\\n          <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"cancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" type=\\\"button\\\" class=\\\"btn btn-danger\\\">Cancel</button>\\n          <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"submit\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"submitText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</button>\\n        </div>\\n      \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":multi-select isOpen:open\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n  <button class=\\\"btn btn-default dropdown-toggle\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleOpen\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'disabled\': (\"isLoading\")\n      },hashTypes:{\'disabled\': \"STRING\"},hashContexts:{\'disabled\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"isLoading\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" <span class=\\\"caret\\\"></span></button>\\n  \");\n      stack1 = helpers[\'if\'].call(depth0, \"isOpen\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/components/multi-select.js");

;eval("define(\"dummy/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"open\");\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"closed\");\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n      <li>\");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<h2>Static multiselect</h2>\\n<div style=\\\"float: left; width: 400px; background-color: DDD; border: 1px solid black; padding: 10px\\\">\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers[\'multi-select\'] || (depth0 && depth0[\'multi-select\']),options={hash:{\n        \'content\': (\"myList\"),\n        \'name\': (\"Invitees\"),\n        \'selected\': (\"pplComingRT\"),\n        \'displayName\': (\"showme\"),\n        \'isOpen\': (\"dropdownOpen\"),\n        \'clearOnClose\': (true),\n        \'showRecordNum\': (false),\n        \'submit\': (\"selectionSaved\"),\n        \'submitText\': (\"Save Selections\")\n      },hashTypes:{\'content\': \"ID\",\'name\': \"STRING\",\'selected\': \"ID\",\'displayName\': \"STRING\",\'isOpen\': \"ID\",\'clearOnClose\': \"BOOLEAN\",\'showRecordNum\': \"BOOLEAN\",\'submit\': \"STRING\",\'submitText\': \"STRING\"},hashContexts:{\'content\': depth0,\'name\': depth0,\'selected\': depth0,\'displayName\': depth0,\'isOpen\': depth0,\'clearOnClose\': depth0,\'showRecordNum\': depth0,\'submit\': depth0,\'submitText\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"multi-select\", options))));\n      data.buffer.push(\"\\n</div>\\n<div style=\\\"float: left; margin-left: 20px\\\">\\n  <p>Button \");\n      stack1 = helpers[\'if\'].call(depth0, \"dropdownOpen\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n  <div>\\n    <h2>People Coming (realtime)</h2>\\n    <ul>\\n    \");\n      stack1 = helpers.each.call(depth0, \"pplComingRT\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </ul>\\n  </div>\\n  <div>\\n    <h2>People Coming (on multiselect save)</h2>\\n    <ul>\\n    \");\n      stack1 = helpers.each.call(depth0, \"pplComing\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </ul>\\n  </div>\\n</div>\\n<div style=\\\"clear: both\\\"></div>\\n\\n<h2>Promise multiselect</h2>\\n<p>Selections remain if dropdown is closed</p>\\n<div style=\\\"float: left; width: 400px; background-color: DDD; border: 1px solid black; padding: 10px\\\">\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers[\'multi-select\'] || (depth0 && depth0[\'multi-select\']),options={hash:{\n        \'content\': (\"myPromiseList\"),\n        \'name\': (\"Invitees\"),\n        \'selected\': (\"coloursSelected\"),\n        \'displayName\': (\"name\"),\n        \'viewLimit\': (2)\n      },hashTypes:{\'content\': \"ID\",\'name\': \"STRING\",\'selected\': \"ID\",\'displayName\': \"STRING\",\'viewLimit\': \"INTEGER\"},hashContexts:{\'content\': depth0,\'name\': depth0,\'selected\': depth0,\'displayName\': depth0,\'viewLimit\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"multi-select\", options))));\n      data.buffer.push(\"\\n</div>\\n<div style=\\\"float: left; margin-left: 20px\\\">\\n  <div>\\n    <h2>Colours selected</h2>\\n    <p>Note: blue is hidden because of the view limit. Search for it to find it</p>\\n    <ul>\\n    \");\n      stack1 = helpers.each.call(depth0, \"coloursSelected\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </ul>\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/index.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/index.js should pass jshint\', function() { \n      ok(true, \'controllers/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/index.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/multi-select-component-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/multi-select-component-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/multi-select-component-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/multi-select-component-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/multi-select-component-test\", \n  [\"ember\",\"dummy/tests/helpers/start-app\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /* global moment */\n    var Em = __dependency1__[\"default\"];\n    var startApp = __dependency2__[\"default\"];\n    var test = __dependency3__.test;\n    var moduleForComponent = __dependency3__.moduleForComponent;\n\n    var App, component;\n\n    moduleForComponent(\'multi-select\', \'ember-cli-multiselectcomponent\', {\n      setup: function() {\n        App = startApp();\n      },\n      teardown: function() {\n        Em.run(App, \'destroy\');\n        // clear up component (this should be done by ember-qunit soon!)\n        if (component) {\n          Em.run(component, \'destroy\');\n          component = null;\n        }\n      }\n    });\n\n    test(\'it loads data directly\', function() {\n      expect(2);\n      var data = [{name: \'hi\'}, {name: \'there\'}];\n      component = this.subject({\n        content: data\n      });\n      equal(component.get(\'_content\'), data);\n      equal(component.get(\'filteredRecords\'), data);\n    });\n\n    test(\'it loads data directly but limits first view\', function() {\n      expect(3);\n      var data = [{name: \'hi\'}, {name: \'there\'}], component = null;\n      component = this.subject({\n        content: data,\n        viewLimit: 1\n      });\n      equal(component.get(\'_content\'), data);\n      equal(component.get(\'filteredRecords\').get(\'length\'), 1, \"Limited records\");\n      equal(component.get(\'filteredRecords\')[0].name, \'hi\', \"has first record\");\n    });\n\n    // need some help on this\n    //test(\'it loads data as a promise\', function() {\n    //  expect(1);\n    //  var data = [{name: \'hi\'}, {name: \'there\'}],\n    //      p = new Em.RSVP.Promise(function(resolve) {\n    //        Em.run.later(function() {\n    //          resolve(data);\n    //        }, 1000);\n    //      });\n    //  component = this.subject({\n    //    content: p\n    //  });\n    //  Em.run(function() {\n    //    p.then(function(r) {\n    //      debugger;\n    //    });\n    //  });\n    //});\n  });//# sourceURL=dummy/tests/unit/multi-select-component-test.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */



});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */
